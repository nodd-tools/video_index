{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"repo name","text":"<p>Describe your project here</p>"},{"location":"#installation","title":"Installation","text":"<p>Put installation instructions here</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We would love to have your contributions that improve current functionality, fix bugs, or add new features.  See the contributing guidelines for more info.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This repository is a scientific product and is not official communication of the National Oceanic and Atmospheric Administration, or the United States Department of Commerce. All NOAA GitHub project code is provided on an \u2018as is\u2019 basis and the user assumes responsibility for its use. Any claims against the Department of Commerce or Department of Commerce bureaus stemming from the use of this GitHub project will be governed by all applicable Federal law. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or favoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a DOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by DOC or the United States Government.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":"<p>This code of conduct was developed and adapted from the Atom code of conduct in October 2021. </p>"},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Further details of specific enforcement policies may be posted separately.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://contributor-covenant.org/version/1/4</p>"},{"location":"CONTRIBUTING/","title":"Contributing Guidelines","text":"<p>Pull requests, bug reports, and all other forms of contribution are welcomed and highly encouraged! </p>"},{"location":"CONTRIBUTING/#contents","title":"Contents","text":"<ul> <li>Code of Conduct</li> <li>Bug Reports</li> <li>Feature Requests</li> <li>Submitting Pull Requests</li> <li>Code Review</li> <li>Coding Style</li> <li>Documentation</li> <li>Certificate of Origin</li> </ul> <p>This guide serves to set clear expectations for everyone involved with the project so that we can improve it together while also creating a welcoming space for everyone to participate. Following these guidelines will help ensure a positive experience for contributors and maintainers.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Please review our Code of Conduct. It is in effect at all times. We expect it to be honored by everyone who contributes to this project. Acting like an asshole will not be tolerated.</p>"},{"location":"CONTRIBUTING/#bug-reports","title":"Bug Reports","text":"<p>Please include a minimal reproducible example with your bug report.</p>"},{"location":"CONTRIBUTING/#feature-requests","title":"Feature Requests","text":"<p>Feature requests are welcome if they fit within the scope of the project.</p> <p>Feature requests that you are willing to complete are especially welcome.  </p>"},{"location":"CONTRIBUTING/#submitting-pull-requests","title":"Submitting Pull Requests","text":"<p>Please submit an issue first and get community buy-in for proposed changes before doing any work.</p> <p>Please submit PRs in the smallest possible non-breaking chunks.</p>"},{"location":"CONTRIBUTING/#code-review","title":"Code Review","text":"<p>Any code pulled into this repo should be reviewed by a maintainer.</p> <p>Remember:</p> <ul> <li> <p>Review the code, not the author. Look for and suggest improvements without disparaging or insulting the author. Provide actionable feedback and explain your reasoning.</p> </li> <li> <p>You are not your code. When your code is critiqued, questioned, or constructively criticized, remember that you are not your code. Do not take code review personally.</p> </li> </ul>"},{"location":"CONTRIBUTING/#coding-style","title":"Coding Style","text":"<p>Follow the existing style.  We use the VSCode autopep8 linter.</p>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<p>Please include typing and docstrings for any classes.  We use numpy style docstrings.  Our auto-documentation is configured to parse this style, so please follow this convention.</p>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<p>Please write tests for your code.  Tests should be discoverable or runnable on a file-by-file basis.  Make sure all tests pass before submitting a pull request. </p> <pre><code>python -m unittest discover tests\n</code></pre>"},{"location":"CONTRIBUTING/#certificate-of-origin","title":"Certificate of Origin","text":"<p>WHEN YOU SUBMIT CODE TO THIS REPOSITORY, YOU AGREE TO LICENSE YOUR CODE UNDER THE LICENSE</p> <p>Developer's Certificate of Origin 1.1</p> <p>By making a contribution to this project, I certify that:</p> <ol> <li>The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or</li> <li>The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or</li> <li>The contribution was provided directly to me by some other person who certified (1), (2) or (3) and I have not modified it.</li> <li>I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.</li> </ol>"},{"location":"api/build_index/","title":"build_index module","text":""},{"location":"api/build_index/#video_index.build_index.build_index","title":"<code>build_index(ivf_path, index_path)</code>","text":"<p>Parse IVF video and build the 128-bit frame index file.</p> <p>Parameters:</p> Name Type Description Default <code>ivf_path</code> <code>str</code> <p>Path to the IVF video file.</p> required <code>index_path</code> <code>str</code> <p>Path where to save the binary index file.</p> required Source code in <code>video_index/build_index.py</code> <pre><code>def build_index(ivf_path: str, index_path: str) -&gt; None:\n    \"\"\"\n    Parse IVF video and build the 128-bit frame index file.\n\n    Parameters\n    ----------\n    ivf_path : str\n        Path to the IVF video file.\n    index_path : str\n        Path where to save the binary index file.\n    \"\"\"\n    frame_positions = parse_ivf_frame_headers(ivf_path)\n    write_binary_index(index_path, frame_positions)\n</code></pre>"},{"location":"api/build_index/#video_index.build_index.parse_ivf_frame_headers","title":"<code>parse_ivf_frame_headers(ivf_path)</code>","text":"<p>Parses the IVF file to extract frame offsets and lengths.</p> <p>Parameters:</p> Name Type Description Default <code>ivf_path</code> <code>str</code> <p>Path to the IVF video file.</p> required <p>Returns:</p> Type Description <code>List[Tuple[int, int]]</code> <p>A list of tuples where each tuple is (offset, length) of a frame in bytes. Offset is the absolute byte position in the file where the frame data starts, length is the size of the frame in bytes.</p> Source code in <code>video_index/build_index.py</code> <pre><code>def parse_ivf_frame_headers(ivf_path: str) -&gt; List[Tuple[int, int]]:\n    \"\"\"\n    Parses the IVF file to extract frame offsets and lengths.\n\n    Parameters\n    ----------\n    ivf_path : str\n        Path to the IVF video file.\n\n    Returns\n    -------\n    List[Tuple[int, int]]\n        A list of tuples where each tuple is (offset, length) of a frame in bytes.\n        Offset is the absolute byte position in the file where the frame data starts,\n        length is the size of the frame in bytes.\n    \"\"\"\n    frame_positions = []\n\n    with open(ivf_path, 'rb') as f:\n        # IVF header is 32 bytes\n        header = f.read(32)\n        if len(header) != 32 or header[0:4] != b'DKIF':\n            raise ValueError(\"Not a valid IVF file\")\n\n        offset = 32  # start of first frame\n\n        while True:\n            # Each frame header is 12 bytes:\n            # 4 bytes frame size (little-endian)\n            # 8 bytes presentation timestamp (ignored here)\n            frame_header = f.read(12)\n            if len(frame_header) &lt; 12:\n                break  # EOF\n\n            frame_size = struct.unpack('&lt;I', frame_header[0:4])[0]\n\n            frame_positions.append((offset + 12, frame_size))\n\n            # Seek over frame payload to next frame header\n            f.seek(frame_size, 1)\n            offset += 12 + frame_size\n\n    return frame_positions\n</code></pre>"},{"location":"api/build_index/#video_index.build_index.write_binary_index","title":"<code>write_binary_index(index_path, frame_positions)</code>","text":"<p>Write the frame positions to a fixed-width binary index file.</p> <p>Parameters:</p> Name Type Description Default <code>index_path</code> <code>str</code> <p>Path to write the index file.</p> required <code>frame_positions</code> <code>List[Tuple[int, int]]</code> <p>List of (offset, length) for each frame.</p> required Source code in <code>video_index/build_index.py</code> <pre><code>def write_binary_index(index_path: str, frame_positions: List[Tuple[int, int]]) -&gt; None:\n    \"\"\"\n    Write the frame positions to a fixed-width binary index file.\n\n    Parameters\n    ----------\n    index_path : str\n        Path to write the index file.\n    frame_positions : List[Tuple[int, int]]\n        List of (offset, length) for each frame.\n    \"\"\"\n    with open(index_path, 'wb') as f:\n        for offset, length in frame_positions:\n            # Pack as two little-endian uint64 (16 bytes per frame)\n            f.write(struct.pack('&lt;QQ', offset, length))\n</code></pre>"},{"location":"api/encode_video/","title":"encode_video module","text":""},{"location":"api/encode_video/#video_index.encode_video.encode_av1_intra","title":"<code>encode_av1_intra(input_path, output_path, crf=30, cpu_used=4, tune=None)</code>","text":"<p>Encode a video to AV1 intra-only IVF format using FFmpeg and libaom-av1.</p> <p>Parameters:</p> Name Type Description Default <code>input_path</code> <code>str</code> <p>Path to the input video file.</p> required <code>output_path</code> <code>str</code> <p>Path to save the encoded AV1 IVF video.</p> required <code>crf</code> <code>int</code> <p>Constant Rate Factor for quality (lower is better quality), by default 30</p> <code>30</code> <code>cpu_used</code> <code>int</code> <p>Speed/quality tradeoff, lower is slower/better, by default 4</p> <code>4</code> <code>tune</code> <code>Optional[str]</code> <p>Tune preset string for encoder (e.g., 'psnr'), by default None</p> <code>None</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the encoding process fails.</p> Source code in <code>video_index/encode_video.py</code> <pre><code>def encode_av1_intra(\n    input_path: str,\n    output_path: str,\n    crf: int = 30,\n    cpu_used: int = 4,\n    tune: Optional[str] = None,\n) -&gt; None:\n    \"\"\"\n    Encode a video to AV1 intra-only IVF format using FFmpeg and libaom-av1.\n\n    Parameters\n    ----------\n    input_path : str\n        Path to the input video file.\n    output_path : str\n        Path to save the encoded AV1 IVF video.\n    crf : int, optional\n        Constant Rate Factor for quality (lower is better quality), by default 30\n    cpu_used : int, optional\n        Speed/quality tradeoff, lower is slower/better, by default 4\n    tune : Optional[str], optional\n        Tune preset string for encoder (e.g., 'psnr'), by default None\n\n    Raises\n    ------\n    RuntimeError\n        If the encoding process fails.\n    \"\"\"\n    ffmpeg_cmd = [\n        \"ffmpeg\",\n        \"-y\",  # overwrite output\n        \"-i\", input_path,\n        \"-c:v\", \"libaom-av1\",\n        \"-g\", \"1\",  # GOP size 1 = intra-only\n        \"-cpu-used\", str(cpu_used),\n        \"-crf\", str(crf),\n        \"-row-mt\", \"1\",  # enable row-based multi-threading for speed\n        \"-tile-columns\", \"0\",  # single tile for intra-only\n        \"-f\", \"ivf\",\n        output_path,\n    ]\n\n    if tune:\n        ffmpeg_cmd.extend([\"-tune\", tune])\n\n    print(\"Running ffmpeg:\", \" \".join(ffmpeg_cmd))\n    result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True)\n\n    if result.returncode != 0:\n        raise RuntimeError(\n            f\"FFmpeg encoding failed with code {result.returncode}:\\n{result.stderr}\"\n        )\n</code></pre>"},{"location":"api/gcloud_utils/","title":"gcloud_utils module","text":""},{"location":"api/gcloud_utils/#video_index.gcloud_utils.serve_frame","title":"<code>serve_frame(video_url=Query(..., description='URL to the AV1 intra-only video file'), index_url=Query(..., description='URL to the binary frame index file'), frame=Query(..., ge=0, description='Frame number to retrieve'))</code>  <code>async</code>","text":"<p>Serve a single raw AV1 frame from video_url at the given frame number, using the binary index file at index_url.</p> Source code in <code>video_index/gcloud_utils.py</code> <pre><code>@app.get(\"/frame\")\nasync def serve_frame(\n    video_url: str = Query(..., description=\"URL to the AV1 intra-only video file\"),\n    index_url: str = Query(..., description=\"URL to the binary frame index file\"),\n    frame: int = Query(..., ge=0, description=\"Frame number to retrieve\"),\n):\n    \"\"\"\n    Serve a single raw AV1 frame from video_url at the given frame number,\n    using the binary index file at index_url.\n    \"\"\"\n    try:\n        frame_bytes = get_frame_from_urls(video_url, index_url, frame)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))\n\n    return StreamingResponse(io.BytesIO(frame_bytes), media_type=\"video/AV1\")\n</code></pre>"},{"location":"api/get_frame/","title":"get_frame module","text":""},{"location":"api/get_frame/#video_index.get_frame.fetch_frame_data","title":"<code>fetch_frame_data(video_url, offset, length)</code>","text":"<p>Fetch the frame bytes from the video using HTTP Range requests.</p> <p>Parameters:</p> Name Type Description Default <code>video_url</code> <code>str</code> <p>URL to the video file.</p> required <code>offset</code> <code>int</code> <p>Byte offset where the frame starts.</p> required <code>length</code> <code>int</code> <p>Length in bytes of the frame.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The raw frame bytes.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the request fails or returns incomplete data.</p> Source code in <code>video_index/get_frame.py</code> <pre><code>def fetch_frame_data(video_url: str, offset: int, length: int) -&gt; bytes:\n    \"\"\"\n    Fetch the frame bytes from the video using HTTP Range requests.\n\n    Parameters\n    ----------\n    video_url : str\n        URL to the video file.\n    offset : int\n        Byte offset where the frame starts.\n    length : int\n        Length in bytes of the frame.\n\n    Returns\n    -------\n    bytes\n        The raw frame bytes.\n\n    Raises\n    ------\n    RuntimeError\n        If the request fails or returns incomplete data.\n    \"\"\"\n    byte_start = offset\n    byte_end = offset + length - 1\n    headers = {'Range': f'bytes={byte_start}-{byte_end}'}\n    resp = requests.get(video_url, headers=headers, stream=True)\n\n    if resp.status_code != 206:\n        raise RuntimeError(f\"Failed to fetch frame bytes: {resp.status_code}\")\n\n    content = resp.content\n    if len(content) != length:\n        raise RuntimeError(f\"Frame data size mismatch: expected {length} got {len(content)}\")\n\n    return content\n</code></pre>"},{"location":"api/get_frame/#video_index.get_frame.fetch_frame_index_entry","title":"<code>fetch_frame_index_entry(index_url, frame_num)</code>","text":"<p>Fetch the binary index entry (offset, length) for the given frame number.</p> <p>Parameters:</p> Name Type Description Default <code>index_url</code> <code>str</code> <p>URL to the binary index file.</p> required <code>frame_num</code> <code>int</code> <p>Frame number to fetch.</p> required <p>Returns:</p> Type Description <code>Tuple[int, int]</code> <p>(offset, length) of the frame in bytes.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If unable to fetch or parse the index entry.</p> Source code in <code>video_index/get_frame.py</code> <pre><code>def fetch_frame_index_entry(index_url: str, frame_num: int) -&gt; Tuple[int, int]:\n    \"\"\"\n    Fetch the binary index entry (offset, length) for the given frame number.\n\n    Parameters\n    ----------\n    index_url : str\n        URL to the binary index file.\n    frame_num : int\n        Frame number to fetch.\n\n    Returns\n    -------\n    Tuple[int, int]\n        (offset, length) of the frame in bytes.\n\n    Raises\n    ------\n    RuntimeError\n        If unable to fetch or parse the index entry.\n    \"\"\"\n    # Each entry is 16 bytes (2x uint64), so calculate range\n    byte_start = frame_num * 16\n    byte_end = byte_start + 15\n\n    headers = {'Range': f'bytes={byte_start}-{byte_end}'}\n    resp = requests.get(index_url, headers=headers)\n    if resp.status_code != 206:\n        raise RuntimeError(f\"Failed to fetch index range bytes: {resp.status_code}\")\n\n    if len(resp.content) != 16:\n        raise RuntimeError(f\"Index entry size mismatch: expected 16 got {len(resp.content)}\")\n\n    offset, length = struct.unpack('&lt;QQ', resp.content)\n    return offset, length\n</code></pre>"},{"location":"api/get_frame/#video_index.get_frame.get_frame_from_urls","title":"<code>get_frame_from_urls(video_url, index_url, frame_num)</code>","text":"<p>Get a frame's raw bytes from a video and its index URL.</p> <p>video_url = \"https://storage.googleapis.com/my-bucket/myvideo.ivf\" index_url = \"https://storage.googleapis.com/my-bucket/myvideo.ivf.idx\" frame_num = 123</p> <p>frame_bytes = get_frame_from_urls(video_url, index_url, frame_num)</p>"},{"location":"api/get_frame/#video_index.get_frame.get_frame_from_urls--you-can-now-return-these-bytes-directly-to-a-user-or-save-to-disk-etc","title":"You can now return these bytes directly to a user, or save to disk, etc.","text":"<p>Parameters:</p> Name Type Description Default <code>video_url</code> <code>str</code> <p>URL to the AV1 intra-only video file.</p> required <code>index_url</code> <code>str</code> <p>URL to the binary index file.</p> required <code>frame_num</code> <code>int</code> <p>The frame number to fetch.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>Raw frame bytes.</p> Source code in <code>video_index/get_frame.py</code> <pre><code>def get_frame_from_urls(video_url: str, index_url: str, frame_num: int) -&gt; bytes:\n    \"\"\"\n    Get a frame's raw bytes from a video and its index URL.\n\n    video_url = \"https://storage.googleapis.com/my-bucket/myvideo.ivf\"\n    index_url = \"https://storage.googleapis.com/my-bucket/myvideo.ivf.idx\"\n    frame_num = 123\n\n    frame_bytes = get_frame_from_urls(video_url, index_url, frame_num)\n    # You can now return these bytes directly to a user, or save to disk, etc.\n\n    Parameters\n    ----------\n    video_url : str\n        URL to the AV1 intra-only video file.\n    index_url : str\n        URL to the binary index file.\n    frame_num : int\n        The frame number to fetch.\n\n    Returns\n    -------\n    bytes\n        Raw frame bytes.\n    \"\"\"\n    offset, length = fetch_frame_index_entry(index_url, frame_num)\n    frame_bytes = fetch_frame_data(video_url, offset, length)\n    return frame_bytes\n</code></pre>"},{"location":"api/get_frame/#video_index.get_frame.parse_frame_from_url","title":"<code>parse_frame_from_url(url)</code>","text":"<p>Parse the frame number from a URL fragment or query parameter.</p> <p>Supports URLs with either a #frame=N fragment or ?frame=N query parameter.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The full URL containing the frame number.</p> required <p>Returns:</p> Type Description <code>Optional[int]</code> <p>The frame number if found, else None.</p> Source code in <code>video_index/get_frame.py</code> <pre><code>def parse_frame_from_url(url: str) -&gt; Optional[int]:\n    \"\"\"\n    Parse the frame number from a URL fragment or query parameter.\n\n    Supports URLs with either a #frame=N fragment or ?frame=N query parameter.\n\n    Parameters\n    ----------\n    url : str\n        The full URL containing the frame number.\n\n    Returns\n    -------\n    Optional[int]\n        The frame number if found, else None.\n    \"\"\"\n    parsed = urlparse(url)\n    fragment = parsed.fragment\n    query = parse_qs(parsed.query)\n\n    # Check fragment e.g. #frame=123\n    if fragment.startswith(\"frame=\"):\n        try:\n            return int(fragment.split(\"=\", 1)[1])\n        except ValueError:\n            return None\n\n    # Check query parameters e.g. ?frame=123\n    if 'frame' in query:\n        try:\n            return int(query['frame'][0])\n        except (ValueError, IndexError):\n            return None\n\n    return None\n</code></pre>"},{"location":"api/utils/","title":"utils module","text":""},{"location":"api/utils/#video_index.utils.bytes_to_int_le","title":"<code>bytes_to_int_le(data)</code>","text":"<p>Convert a little-endian bytes object to an integer.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>The bytes to convert.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The integer represented by the bytes.</p> Source code in <code>video_index/utils.py</code> <pre><code>def bytes_to_int_le(data: bytes) -&gt; int:\n    \"\"\"\n    Convert a little-endian bytes object to an integer.\n\n    Parameters\n    ----------\n    data : bytes\n        The bytes to convert.\n\n    Returns\n    -------\n    int\n        The integer represented by the bytes.\n    \"\"\"\n    return int.from_bytes(data, byteorder='little', signed=False)\n</code></pre>"},{"location":"api/utils/#video_index.utils.int_to_bytes_le","title":"<code>int_to_bytes_le(value, length)</code>","text":"<p>Convert an integer to a little-endian bytes object of given length.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>The integer to convert.</p> required <code>length</code> <code>int</code> <p>The length of the resulting bytes object.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The little-endian byte representation of the integer.</p> Source code in <code>video_index/utils.py</code> <pre><code>def int_to_bytes_le(value: int, length: int) -&gt; bytes:\n    \"\"\"\n    Convert an integer to a little-endian bytes object of given length.\n\n    Parameters\n    ----------\n    value : int\n        The integer to convert.\n    length : int\n        The length of the resulting bytes object.\n\n    Returns\n    -------\n    bytes\n        The little-endian byte representation of the integer.\n    \"\"\"\n    return value.to_bytes(length, byteorder='little', signed=False)\n</code></pre>"}]}